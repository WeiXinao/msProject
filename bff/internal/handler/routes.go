// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5

package handler

import (
	"net/http"

	organization "github.com/WeiXinao/msProject/bff/internal/handler/organization"
	project "github.com/WeiXinao/msProject/bff/internal/handler/project"
	task "github.com/WeiXinao/msProject/bff/internal/handler/task"
	user "github.com/WeiXinao/msProject/bff/internal/handler/user"
	"github.com/WeiXinao/msProject/bff/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/_getOrgList",
					Handler: organization.MyOrgListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/project/organization"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/index",
					Handler: project.IndexHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project",
					Handler: project.ProjectListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project/edit",
					Handler: project.EditProjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project/read",
					Handler: project.ReadProjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project/recovery",
					Handler: project.RecoverProjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project/recycle",
					Handler: project.RecycleProjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project/save",
					Handler: project.ProjectSaveHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project/selfList",
					Handler: project.MyProjectListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project_collect/collect",
					Handler: project.CollectProjectHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project_member/index",
					Handler: project.ProjectMemberHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/project_template",
					Handler: project.ProjectTemplateHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/project"),
	)

	server.AddRoutes(
		rest.WithMiddlewares(
			[]rest.Middleware{serverCtx.AuthMiddleware},
			[]rest.Route{
				{
					Method:  http.MethodPost,
					Path:    "/task/save",
					Handler: task.SaveTaskHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task/selfList",
					Handler: task.MyTaskListHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task/sort",
					Handler: task.TaskSortHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task_stages",
					Handler: task.TaskStagesHandler(serverCtx),
				},
				{
					Method:  http.MethodPost,
					Path:    "/task_stages/tasks",
					Handler: task.TaskListHandler(serverCtx),
				},
			}...,
		),
		rest.WithPrefix("/project"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/login",
				Handler: user.LoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/getCaptcha",
				Handler: user.GetCaptchaHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/login/register",
				Handler: user.RegisterHandler(serverCtx),
			},
		},
		rest.WithPrefix("/project"),
	)
}
