// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/project/v1/project.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProjectService_TaskLog_FullMethodName                 = "/api.proto.project.v1.ProjectService/TaskLog"
	ProjectService_CreateProjectLog_FullMethodName        = "/api.proto.project.v1.ProjectService/CreateProjectLog"
	ProjectService_Index_FullMethodName                   = "/api.proto.project.v1.ProjectService/Index"
	ProjectService_FindProjectByMemId_FullMethodName      = "/api.proto.project.v1.ProjectService/FindProjectByMemId"
	ProjectService_FindProjectTemplate_FullMethodName     = "/api.proto.project.v1.ProjectService/FindProjectTemplate"
	ProjectService_SaveProject_FullMethodName             = "/api.proto.project.v1.ProjectService/SaveProject"
	ProjectService_ProjectDetail_FullMethodName           = "/api.proto.project.v1.ProjectService/ProjectDetail"
	ProjectService_RecycleOrRecoverProject_FullMethodName = "/api.proto.project.v1.ProjectService/RecycleOrRecoverProject"
	ProjectService_UpdateCollectProject_FullMethodName    = "/api.proto.project.v1.ProjectService/UpdateCollectProject"
	ProjectService_UpdateProject_FullMethodName           = "/api.proto.project.v1.ProjectService/UpdateProject"
	ProjectService_ProjectMemberList_FullMethodName       = "/api.proto.project.v1.ProjectService/ProjectMemberList"
	ProjectService_FindProjectById_FullMethodName         = "/api.proto.project.v1.ProjectService/FindProjectById"
	ProjectService_FindProjectByIds_FullMethodName        = "/api.proto.project.v1.ProjectService/FindProjectByIds"
)

// ProjectServiceClient is the client API for ProjectService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectServiceClient interface {
	TaskLog(ctx context.Context, in *TaskLogRequest, opts ...grpc.CallOption) (*TaskLogResponse, error)
	CreateProjectLog(ctx context.Context, in *CreateProjectLogRequest, opts ...grpc.CallOption) (*CreateProjectLogResponse, error)
	Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error)
	FindProjectByMemId(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	FindProjectTemplate(ctx context.Context, in *FindProjectTemplateRequest, opts ...grpc.CallOption) (*FindProjectTemplateResponse, error)
	SaveProject(ctx context.Context, in *SaveProjectReq, opts ...grpc.CallOption) (*SaveProjectRsp, error)
	ProjectDetail(ctx context.Context, in *ProjectDetailRequest, opts ...grpc.CallOption) (*ProjectDetailResponse, error)
	RecycleOrRecoverProject(ctx context.Context, in *RecycleProjectRequest, opts ...grpc.CallOption) (*RecycleProjectResponse, error)
	UpdateCollectProject(ctx context.Context, in *UpdateCollectProjectRequest, opts ...grpc.CallOption) (*UpdateCollectProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error)
	ProjectMemberList(ctx context.Context, in *ProjectMemberListRequest, opts ...grpc.CallOption) (*ProjectMemberListResponse, error)
	FindProjectById(ctx context.Context, in *FindProjectByIdRequest, opts ...grpc.CallOption) (*ProjectMessage, error)
	FindProjectByIds(ctx context.Context, in *FindProjectByIdsRequest, opts ...grpc.CallOption) (*FindProjectByIdsResponse, error)
}

type projectServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectServiceClient(cc grpc.ClientConnInterface) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) TaskLog(ctx context.Context, in *TaskLogRequest, opts ...grpc.CallOption) (*TaskLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskLogResponse)
	err := c.cc.Invoke(ctx, ProjectService_TaskLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) CreateProjectLog(ctx context.Context, in *CreateProjectLogRequest, opts ...grpc.CallOption) (*CreateProjectLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectLogResponse)
	err := c.cc.Invoke(ctx, ProjectService_CreateProjectLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Index(ctx context.Context, in *IndexRequest, opts ...grpc.CallOption) (*IndexResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(IndexResponse)
	err := c.cc.Invoke(ctx, ProjectService_Index_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectByMemId(ctx context.Context, in *ProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectByMemId_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectTemplate(ctx context.Context, in *FindProjectTemplateRequest, opts ...grpc.CallOption) (*FindProjectTemplateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindProjectTemplateResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectTemplate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) SaveProject(ctx context.Context, in *SaveProjectReq, opts ...grpc.CallOption) (*SaveProjectRsp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveProjectRsp)
	err := c.cc.Invoke(ctx, ProjectService_SaveProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ProjectDetail(ctx context.Context, in *ProjectDetailRequest, opts ...grpc.CallOption) (*ProjectDetailResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectDetailResponse)
	err := c.cc.Invoke(ctx, ProjectService_ProjectDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) RecycleOrRecoverProject(ctx context.Context, in *RecycleProjectRequest, opts ...grpc.CallOption) (*RecycleProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecycleProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_RecycleOrRecoverProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateCollectProject(ctx context.Context, in *UpdateCollectProjectRequest, opts ...grpc.CallOption) (*UpdateCollectProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateCollectProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_UpdateCollectProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*UpdateProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateProjectResponse)
	err := c.cc.Invoke(ctx, ProjectService_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) ProjectMemberList(ctx context.Context, in *ProjectMemberListRequest, opts ...grpc.CallOption) (*ProjectMemberListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectMemberListResponse)
	err := c.cc.Invoke(ctx, ProjectService_ProjectMemberList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectById(ctx context.Context, in *FindProjectByIdRequest, opts ...grpc.CallOption) (*ProjectMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectMessage)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) FindProjectByIds(ctx context.Context, in *FindProjectByIdsRequest, opts ...grpc.CallOption) (*FindProjectByIdsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindProjectByIdsResponse)
	err := c.cc.Invoke(ctx, ProjectService_FindProjectByIds_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProjectServiceServer is the server API for ProjectService service.
// All implementations must embed UnimplementedProjectServiceServer
// for forward compatibility.
type ProjectServiceServer interface {
	TaskLog(context.Context, *TaskLogRequest) (*TaskLogResponse, error)
	CreateProjectLog(context.Context, *CreateProjectLogRequest) (*CreateProjectLogResponse, error)
	Index(context.Context, *IndexRequest) (*IndexResponse, error)
	FindProjectByMemId(context.Context, *ProjectRequest) (*ProjectResponse, error)
	FindProjectTemplate(context.Context, *FindProjectTemplateRequest) (*FindProjectTemplateResponse, error)
	SaveProject(context.Context, *SaveProjectReq) (*SaveProjectRsp, error)
	ProjectDetail(context.Context, *ProjectDetailRequest) (*ProjectDetailResponse, error)
	RecycleOrRecoverProject(context.Context, *RecycleProjectRequest) (*RecycleProjectResponse, error)
	UpdateCollectProject(context.Context, *UpdateCollectProjectRequest) (*UpdateCollectProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error)
	ProjectMemberList(context.Context, *ProjectMemberListRequest) (*ProjectMemberListResponse, error)
	FindProjectById(context.Context, *FindProjectByIdRequest) (*ProjectMessage, error)
	FindProjectByIds(context.Context, *FindProjectByIdsRequest) (*FindProjectByIdsResponse, error)
	mustEmbedUnimplementedProjectServiceServer()
}

// UnimplementedProjectServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProjectServiceServer struct{}

func (UnimplementedProjectServiceServer) TaskLog(context.Context, *TaskLogRequest) (*TaskLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskLog not implemented")
}
func (UnimplementedProjectServiceServer) CreateProjectLog(context.Context, *CreateProjectLogRequest) (*CreateProjectLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectLog not implemented")
}
func (UnimplementedProjectServiceServer) Index(context.Context, *IndexRequest) (*IndexResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Index not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectByMemId(context.Context, *ProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectByMemId not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectTemplate(context.Context, *FindProjectTemplateRequest) (*FindProjectTemplateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectTemplate not implemented")
}
func (UnimplementedProjectServiceServer) SaveProject(context.Context, *SaveProjectReq) (*SaveProjectRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProject not implemented")
}
func (UnimplementedProjectServiceServer) ProjectDetail(context.Context, *ProjectDetailRequest) (*ProjectDetailResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectDetail not implemented")
}
func (UnimplementedProjectServiceServer) RecycleOrRecoverProject(context.Context, *RecycleProjectRequest) (*RecycleProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleOrRecoverProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateCollectProject(context.Context, *UpdateCollectProjectRequest) (*UpdateCollectProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCollectProject not implemented")
}
func (UnimplementedProjectServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*UpdateProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedProjectServiceServer) ProjectMemberList(context.Context, *ProjectMemberListRequest) (*ProjectMemberListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProjectMemberList not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectById(context.Context, *FindProjectByIdRequest) (*ProjectMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectById not implemented")
}
func (UnimplementedProjectServiceServer) FindProjectByIds(context.Context, *FindProjectByIdsRequest) (*FindProjectByIdsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProjectByIds not implemented")
}
func (UnimplementedProjectServiceServer) mustEmbedUnimplementedProjectServiceServer() {}
func (UnimplementedProjectServiceServer) testEmbeddedByValue()                        {}

// UnsafeProjectServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServiceServer will
// result in compilation errors.
type UnsafeProjectServiceServer interface {
	mustEmbedUnimplementedProjectServiceServer()
}

func RegisterProjectServiceServer(s grpc.ServiceRegistrar, srv ProjectServiceServer) {
	// If the following call pancis, it indicates UnimplementedProjectServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProjectService_ServiceDesc, srv)
}

func _ProjectService_TaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).TaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_TaskLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).TaskLog(ctx, req.(*TaskLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_CreateProjectLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).CreateProjectLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_CreateProjectLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).CreateProjectLog(ctx, req.(*CreateProjectLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Index_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Index(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_Index_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Index(ctx, req.(*IndexRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectByMemId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectByMemId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectByMemId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectByMemId(ctx, req.(*ProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjectTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectTemplate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectTemplate(ctx, req.(*FindProjectTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_SaveProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProjectReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).SaveProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_SaveProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).SaveProject(ctx, req.(*SaveProjectReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ProjectDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ProjectDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ProjectDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ProjectDetail(ctx, req.(*ProjectDetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_RecycleOrRecoverProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).RecycleOrRecoverProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_RecycleOrRecoverProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).RecycleOrRecoverProject(ctx, req.(*RecycleProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateCollectProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCollectProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateCollectProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateCollectProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateCollectProject(ctx, req.(*UpdateCollectProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_ProjectMemberList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectMemberListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).ProjectMemberList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_ProjectMemberList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).ProjectMemberList(ctx, req.(*ProjectMemberListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjectByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectById(ctx, req.(*FindProjectByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_FindProjectByIds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProjectByIdsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).FindProjectByIds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProjectService_FindProjectByIds_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).FindProjectByIds(ctx, req.(*FindProjectByIdsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProjectService_ServiceDesc is the grpc.ServiceDesc for ProjectService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProjectService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.project.v1.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TaskLog",
			Handler:    _ProjectService_TaskLog_Handler,
		},
		{
			MethodName: "CreateProjectLog",
			Handler:    _ProjectService_CreateProjectLog_Handler,
		},
		{
			MethodName: "Index",
			Handler:    _ProjectService_Index_Handler,
		},
		{
			MethodName: "FindProjectByMemId",
			Handler:    _ProjectService_FindProjectByMemId_Handler,
		},
		{
			MethodName: "FindProjectTemplate",
			Handler:    _ProjectService_FindProjectTemplate_Handler,
		},
		{
			MethodName: "SaveProject",
			Handler:    _ProjectService_SaveProject_Handler,
		},
		{
			MethodName: "ProjectDetail",
			Handler:    _ProjectService_ProjectDetail_Handler,
		},
		{
			MethodName: "RecycleOrRecoverProject",
			Handler:    _ProjectService_RecycleOrRecoverProject_Handler,
		},
		{
			MethodName: "UpdateCollectProject",
			Handler:    _ProjectService_UpdateCollectProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _ProjectService_UpdateProject_Handler,
		},
		{
			MethodName: "ProjectMemberList",
			Handler:    _ProjectService_ProjectMemberList_Handler,
		},
		{
			MethodName: "FindProjectById",
			Handler:    _ProjectService_FindProjectById_Handler,
		},
		{
			MethodName: "FindProjectByIds",
			Handler:    _ProjectService_FindProjectByIds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/project/v1/project.proto",
}
