// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api/proto/task/v1/task.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TaskService_CreateComment_FullMethodName    = "/api.proto.task.v1.TaskService/CreateComment"
	TaskService_TaskLog_FullMethodName          = "/api.proto.task.v1.TaskService/TaskLog"
	TaskService_CreateProjectLog_FullMethodName = "/api.proto.task.v1.TaskService/CreateProjectLog"
	TaskService_SaveTaskWorkTime_FullMethodName = "/api.proto.task.v1.TaskService/SaveTaskWorkTime"
	TaskService_TaskWorkTimeList_FullMethodName = "/api.proto.task.v1.TaskService/TaskWorkTimeList"
	TaskService_ListTaskMember_FullMethodName   = "/api.proto.task.v1.TaskService/ListTaskMember"
	TaskService_ReadTask_FullMethodName         = "/api.proto.task.v1.TaskService/ReadTask"
	TaskService_MyTaskList_FullMethodName       = "/api.proto.task.v1.TaskService/MyTaskList"
	TaskService_TaskSort_FullMethodName         = "/api.proto.task.v1.TaskService/TaskSort"
	TaskService_TaskStages_FullMethodName       = "/api.proto.task.v1.TaskService/TaskStages"
	TaskService_SaveTaskStages_FullMethodName   = "/api.proto.task.v1.TaskService/SaveTaskStages"
	TaskService_TaskList_FullMethodName         = "/api.proto.task.v1.TaskService/TaskList"
	TaskService_SaveTask_FullMethodName         = "/api.proto.task.v1.TaskService/SaveTask"
)

// TaskServiceClient is the client API for TaskService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TaskServiceClient interface {
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	TaskLog(ctx context.Context, in *TaskLogRequest, opts ...grpc.CallOption) (*TaskLogResponse, error)
	CreateProjectLog(ctx context.Context, in *CreateProjectLogRequest, opts ...grpc.CallOption) (*CreateProjectLogResponse, error)
	SaveTaskWorkTime(ctx context.Context, in *SaveTaskWorkTimeRequest, opts ...grpc.CallOption) (*SaveTaskWorkTimeResponse, error)
	TaskWorkTimeList(ctx context.Context, in *TaskWorkTimeRequest, opts ...grpc.CallOption) (*TaskWorkTimeResponse, error)
	ListTaskMember(ctx context.Context, in *ListTaskMemberRequest, opts ...grpc.CallOption) (*ListTaskMemberResponse, error)
	ReadTask(ctx context.Context, in *ReadTaskRequest, opts ...grpc.CallOption) (*TaskMessage, error)
	MyTaskList(ctx context.Context, in *MyTaskListRequest, opts ...grpc.CallOption) (*MyTaskListResponse, error)
	TaskSort(ctx context.Context, in *TaskSortRequest, opts ...grpc.CallOption) (*TaskSortResponse, error)
	TaskStages(ctx context.Context, in *TaskStagesRequest, opts ...grpc.CallOption) (*TaskStagesResponse, error)
	SaveTaskStages(ctx context.Context, in *SaveTaskStagesRequest, opts ...grpc.CallOption) (*SaveTaskStagesResponse, error)
	TaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error)
	SaveTask(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*TaskMessage, error)
}

type taskServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTaskServiceClient(cc grpc.ClientConnInterface) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, TaskService_CreateComment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TaskLog(ctx context.Context, in *TaskLogRequest, opts ...grpc.CallOption) (*TaskLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskLogResponse)
	err := c.cc.Invoke(ctx, TaskService_TaskLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) CreateProjectLog(ctx context.Context, in *CreateProjectLogRequest, opts ...grpc.CallOption) (*CreateProjectLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateProjectLogResponse)
	err := c.cc.Invoke(ctx, TaskService_CreateProjectLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SaveTaskWorkTime(ctx context.Context, in *SaveTaskWorkTimeRequest, opts ...grpc.CallOption) (*SaveTaskWorkTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTaskWorkTimeResponse)
	err := c.cc.Invoke(ctx, TaskService_SaveTaskWorkTime_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TaskWorkTimeList(ctx context.Context, in *TaskWorkTimeRequest, opts ...grpc.CallOption) (*TaskWorkTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskWorkTimeResponse)
	err := c.cc.Invoke(ctx, TaskService_TaskWorkTimeList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ListTaskMember(ctx context.Context, in *ListTaskMemberRequest, opts ...grpc.CallOption) (*ListTaskMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListTaskMemberResponse)
	err := c.cc.Invoke(ctx, TaskService_ListTaskMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) ReadTask(ctx context.Context, in *ReadTaskRequest, opts ...grpc.CallOption) (*TaskMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskMessage)
	err := c.cc.Invoke(ctx, TaskService_ReadTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) MyTaskList(ctx context.Context, in *MyTaskListRequest, opts ...grpc.CallOption) (*MyTaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MyTaskListResponse)
	err := c.cc.Invoke(ctx, TaskService_MyTaskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TaskSort(ctx context.Context, in *TaskSortRequest, opts ...grpc.CallOption) (*TaskSortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskSortResponse)
	err := c.cc.Invoke(ctx, TaskService_TaskSort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TaskStages(ctx context.Context, in *TaskStagesRequest, opts ...grpc.CallOption) (*TaskStagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskStagesResponse)
	err := c.cc.Invoke(ctx, TaskService_TaskStages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SaveTaskStages(ctx context.Context, in *SaveTaskStagesRequest, opts ...grpc.CallOption) (*SaveTaskStagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveTaskStagesResponse)
	err := c.cc.Invoke(ctx, TaskService_SaveTaskStages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) TaskList(ctx context.Context, in *TaskListRequest, opts ...grpc.CallOption) (*TaskListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskListResponse)
	err := c.cc.Invoke(ctx, TaskService_TaskList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) SaveTask(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*TaskMessage, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TaskMessage)
	err := c.cc.Invoke(ctx, TaskService_SaveTask_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TaskServiceServer is the server API for TaskService service.
// All implementations must embed UnimplementedTaskServiceServer
// for forward compatibility.
type TaskServiceServer interface {
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	TaskLog(context.Context, *TaskLogRequest) (*TaskLogResponse, error)
	CreateProjectLog(context.Context, *CreateProjectLogRequest) (*CreateProjectLogResponse, error)
	SaveTaskWorkTime(context.Context, *SaveTaskWorkTimeRequest) (*SaveTaskWorkTimeResponse, error)
	TaskWorkTimeList(context.Context, *TaskWorkTimeRequest) (*TaskWorkTimeResponse, error)
	ListTaskMember(context.Context, *ListTaskMemberRequest) (*ListTaskMemberResponse, error)
	ReadTask(context.Context, *ReadTaskRequest) (*TaskMessage, error)
	MyTaskList(context.Context, *MyTaskListRequest) (*MyTaskListResponse, error)
	TaskSort(context.Context, *TaskSortRequest) (*TaskSortResponse, error)
	TaskStages(context.Context, *TaskStagesRequest) (*TaskStagesResponse, error)
	SaveTaskStages(context.Context, *SaveTaskStagesRequest) (*SaveTaskStagesResponse, error)
	TaskList(context.Context, *TaskListRequest) (*TaskListResponse, error)
	SaveTask(context.Context, *SaveTaskRequest) (*TaskMessage, error)
	mustEmbedUnimplementedTaskServiceServer()
}

// UnimplementedTaskServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTaskServiceServer struct{}

func (UnimplementedTaskServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedTaskServiceServer) TaskLog(context.Context, *TaskLogRequest) (*TaskLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskLog not implemented")
}
func (UnimplementedTaskServiceServer) CreateProjectLog(context.Context, *CreateProjectLogRequest) (*CreateProjectLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProjectLog not implemented")
}
func (UnimplementedTaskServiceServer) SaveTaskWorkTime(context.Context, *SaveTaskWorkTimeRequest) (*SaveTaskWorkTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTaskWorkTime not implemented")
}
func (UnimplementedTaskServiceServer) TaskWorkTimeList(context.Context, *TaskWorkTimeRequest) (*TaskWorkTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskWorkTimeList not implemented")
}
func (UnimplementedTaskServiceServer) ListTaskMember(context.Context, *ListTaskMemberRequest) (*ListTaskMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTaskMember not implemented")
}
func (UnimplementedTaskServiceServer) ReadTask(context.Context, *ReadTaskRequest) (*TaskMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTask not implemented")
}
func (UnimplementedTaskServiceServer) MyTaskList(context.Context, *MyTaskListRequest) (*MyTaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MyTaskList not implemented")
}
func (UnimplementedTaskServiceServer) TaskSort(context.Context, *TaskSortRequest) (*TaskSortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskSort not implemented")
}
func (UnimplementedTaskServiceServer) TaskStages(context.Context, *TaskStagesRequest) (*TaskStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskStages not implemented")
}
func (UnimplementedTaskServiceServer) SaveTaskStages(context.Context, *SaveTaskStagesRequest) (*SaveTaskStagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTaskStages not implemented")
}
func (UnimplementedTaskServiceServer) TaskList(context.Context, *TaskListRequest) (*TaskListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TaskList not implemented")
}
func (UnimplementedTaskServiceServer) SaveTask(context.Context, *SaveTaskRequest) (*TaskMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}
func (UnimplementedTaskServiceServer) mustEmbedUnimplementedTaskServiceServer() {}
func (UnimplementedTaskServiceServer) testEmbeddedByValue()                     {}

// UnsafeTaskServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TaskServiceServer will
// result in compilation errors.
type UnsafeTaskServiceServer interface {
	mustEmbedUnimplementedTaskServiceServer()
}

func RegisterTaskServiceServer(s grpc.ServiceRegistrar, srv TaskServiceServer) {
	// If the following call pancis, it indicates UnimplementedTaskServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TaskService_ServiceDesc, srv)
}

func _TaskService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TaskLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_TaskLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskLog(ctx, req.(*TaskLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_CreateProjectLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProjectLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).CreateProjectLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_CreateProjectLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).CreateProjectLog(ctx, req.(*CreateProjectLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SaveTaskWorkTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskWorkTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTaskWorkTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_SaveTaskWorkTime_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTaskWorkTime(ctx, req.(*SaveTaskWorkTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TaskWorkTimeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskWorkTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskWorkTimeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_TaskWorkTimeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskWorkTimeList(ctx, req.(*TaskWorkTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ListTaskMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTaskMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ListTaskMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ListTaskMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ListTaskMember(ctx, req.(*ListTaskMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_ReadTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).ReadTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_ReadTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).ReadTask(ctx, req.(*ReadTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_MyTaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyTaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).MyTaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_MyTaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).MyTaskList(ctx, req.(*MyTaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TaskSort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskSortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskSort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_TaskSort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskSort(ctx, req.(*TaskSortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TaskStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_TaskStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskStages(ctx, req.(*TaskStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SaveTaskStages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskStagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTaskStages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_SaveTaskStages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTaskStages(ctx, req.(*SaveTaskStagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_TaskList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TaskListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TaskList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_TaskList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TaskList(ctx, req.(*TaskListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TaskService_SaveTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).SaveTask(ctx, req.(*SaveTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TaskService_ServiceDesc is the grpc.ServiceDesc for TaskService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TaskService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.proto.task.v1.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateComment",
			Handler:    _TaskService_CreateComment_Handler,
		},
		{
			MethodName: "TaskLog",
			Handler:    _TaskService_TaskLog_Handler,
		},
		{
			MethodName: "CreateProjectLog",
			Handler:    _TaskService_CreateProjectLog_Handler,
		},
		{
			MethodName: "SaveTaskWorkTime",
			Handler:    _TaskService_SaveTaskWorkTime_Handler,
		},
		{
			MethodName: "TaskWorkTimeList",
			Handler:    _TaskService_TaskWorkTimeList_Handler,
		},
		{
			MethodName: "ListTaskMember",
			Handler:    _TaskService_ListTaskMember_Handler,
		},
		{
			MethodName: "ReadTask",
			Handler:    _TaskService_ReadTask_Handler,
		},
		{
			MethodName: "MyTaskList",
			Handler:    _TaskService_MyTaskList_Handler,
		},
		{
			MethodName: "TaskSort",
			Handler:    _TaskService_TaskSort_Handler,
		},
		{
			MethodName: "TaskStages",
			Handler:    _TaskService_TaskStages_Handler,
		},
		{
			MethodName: "SaveTaskStages",
			Handler:    _TaskService_SaveTaskStages_Handler,
		},
		{
			MethodName: "TaskList",
			Handler:    _TaskService_TaskList_Handler,
		},
		{
			MethodName: "SaveTask",
			Handler:    _TaskService_SaveTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/task/v1/task.proto",
}
