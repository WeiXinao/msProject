// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.5
// Source: account.proto

package account

import (
	"context"

	"github.com/WeiXinao/msProject/api/proto/gen/account/v1"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	AccountRequest             = v1.AccountRequest
	AccountResponse            = v1.AccountResponse
	ApplyResponse              = v1.ApplyResponse
	AuthListRequest            = v1.AuthListRequest
	AuthListResponse           = v1.AuthListResponse
	AuthNodesByMemberIdRequest = v1.AuthNodesByMemberIdRequest
	AuthNodesResponse          = v1.AuthNodesResponse
	AuthReqMessage             = v1.AuthReqMessage
	DepartmentMessage          = v1.DepartmentMessage
	ListDepartmentsReqeust     = v1.ListDepartmentsReqeust
	ListDepartmentsResponse    = v1.ListDepartmentsResponse
	MemberAccount              = v1.MemberAccount
	MenuMessage                = v1.MenuMessage
	MenuRequest                = v1.MenuRequest
	MenuResponse               = v1.MenuResponse
	NodeListRequest            = v1.NodeListRequest
	ProjectAuth                = v1.ProjectAuth
	ProjectNodeMessage         = v1.ProjectNodeMessage
	ProjectNodeResponse        = v1.ProjectNodeResponse
	ReadDepartmentRequest      = v1.ReadDepartmentRequest
	SaveDepartmentRequest      = v1.SaveDepartmentRequest

	Account interface {
		AuthNodesByMemberId(ctx context.Context, in *AuthNodesByMemberIdRequest, opts ...grpc.CallOption) (*AuthNodesResponse, error)
		Account(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error)
		ListDepartments(ctx context.Context, in *ListDepartmentsReqeust, opts ...grpc.CallOption) (*ListDepartmentsResponse, error)
		SaveDepartment(ctx context.Context, in *SaveDepartmentRequest, opts ...grpc.CallOption) (*DepartmentMessage, error)
		ReadDepartment(ctx context.Context, in *ReadDepartmentRequest, opts ...grpc.CallOption) (*DepartmentMessage, error)
		AuthList(ctx context.Context, in *AuthListRequest, opts ...grpc.CallOption) (*AuthListResponse, error)
		MenuList(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*MenuResponse, error)
		NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*ProjectNodeResponse, error)
		Apply(ctx context.Context, in *AuthReqMessage, opts ...grpc.CallOption) (*ApplyResponse, error)
	}

	defaultAccount struct {
		cli zrpc.Client
	}
)

func NewAccount(cli zrpc.Client) Account {
	return &defaultAccount{
		cli: cli,
	}
}

func (m *defaultAccount) AuthNodesByMemberId(ctx context.Context, in *AuthNodesByMemberIdRequest, opts ...grpc.CallOption) (*AuthNodesResponse, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.AuthNodesByMemberId(ctx, in, opts...)
}

func (m *defaultAccount) Account(ctx context.Context, in *AccountRequest, opts ...grpc.CallOption) (*AccountResponse, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.Account(ctx, in, opts...)
}

func (m *defaultAccount) ListDepartments(ctx context.Context, in *ListDepartmentsReqeust, opts ...grpc.CallOption) (*ListDepartmentsResponse, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.ListDepartments(ctx, in, opts...)
}

func (m *defaultAccount) SaveDepartment(ctx context.Context, in *SaveDepartmentRequest, opts ...grpc.CallOption) (*DepartmentMessage, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.SaveDepartment(ctx, in, opts...)
}

func (m *defaultAccount) ReadDepartment(ctx context.Context, in *ReadDepartmentRequest, opts ...grpc.CallOption) (*DepartmentMessage, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.ReadDepartment(ctx, in, opts...)
}

func (m *defaultAccount) AuthList(ctx context.Context, in *AuthListRequest, opts ...grpc.CallOption) (*AuthListResponse, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.AuthList(ctx, in, opts...)
}

func (m *defaultAccount) MenuList(ctx context.Context, in *MenuRequest, opts ...grpc.CallOption) (*MenuResponse, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.MenuList(ctx, in, opts...)
}

func (m *defaultAccount) NodeList(ctx context.Context, in *NodeListRequest, opts ...grpc.CallOption) (*ProjectNodeResponse, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.NodeList(ctx, in, opts...)
}

func (m *defaultAccount) Apply(ctx context.Context, in *AuthReqMessage, opts ...grpc.CallOption) (*ApplyResponse, error) {
	client := v1.NewAccountClient(m.cli.Conn())
	return client.Apply(ctx, in, opts...)
}
